#!/usr/bin/env node

var fs = require('fs')
  , util = require('util')
  , ejs = require('ejs')
  , marked = require('marked');


var targets = [
  {
    title: 'NAMIDI Syntax Manual',
    src: '../doc/ja/syntax.md',
    dest: '../doc/dest/index.html' // TODO
  },
  {
    title: 'NAMIDI Syntax',
    src: '../doc/ja/namidi.md',
    dest: '../doc/dest/namidi.html'
  },
  {
    title: 'ABC Syntax',
    src: '../doc/ja/abc.md',
    dest: '../doc/dest/abc.html'
  },
  {
    title: 'MML Syntax',
    src: '../doc/ja/mml.md',
    dest: '../doc/dest/mml.html'
  }
];

var renderer = new marked.Renderer();

renderer.heading = function (text, level) {
  return '<h'+level+' id="'+text+'">'+text+'</h' + level + '>';
}

renderer.link = function (href, title, text) {
  return '<a href="'+href+'">'+text+'</a>';
}

function main(argv, callback) {
  var template = fs.readFileSync('../doc/template/syntax.ejs', 'utf-8');

  var dir = '../doc/dest/';
  if (!fs.existsSync(dir)){
    fs.mkdirSync(dir);
  }

  for (var i = 0; i < targets.length; ++i) {
    var md = fs.readFileSync(targets[i].src, 'utf8');
    var body = marked(md, {breaks: true, renderer: renderer});
    var html = ejs.render(template, {title: targets[i].title, body: body});
    fs.writeFileSync(targets[i].dest, html);
  }

  var css = {
    src: '../doc/asset/syntax.css',
    dest: '../doc/dest/syntax.css'
  };

  fs.createReadStream(css.src).pipe(fs.createWriteStream(css.dest))
}

if (!module.parent) {
  main(process.argv.slice(), function(err, code) {
    if (err) throw err;
    return process.exit(code || 0);
  });
} else {
  module.exports = main;
}
